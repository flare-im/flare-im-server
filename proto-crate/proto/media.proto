syntax = "proto3";

package api.im.media;

option go_package = "github.com/flare/api/im/media;media";
option java_multiple_files = true;
option java_package = "api.im.media";

import "common/message.proto";

// 媒体服务
service MediaService {
  // 初始化上传
  rpc InitUpload(InitUploadRequest) returns (InitUploadResponse);
  // 分片上传
  rpc UploadChunk(stream UploadChunkRequest) returns (UploadChunkResponse);
  // 完成上传
  rpc CompleteUpload(CompleteUploadRequest) returns (CompleteUploadResponse);
  // 获取上传进度
  rpc GetUploadProgress(GetUploadProgressRequest) returns (GetUploadProgressResponse);
  // 取消上传
  rpc CancelUpload(CancelUploadRequest) returns (CancelUploadResponse);
  // 获取下载URL
  rpc GetDownloadUrl(GetDownloadUrlRequest) returns (GetDownloadUrlResponse);
  // 处理媒体文件
  rpc ProcessMedia(ProcessMediaRequest) returns (ProcessMediaResponse);
  // 删除媒体文件
  rpc DeleteMedia(DeleteMediaRequest) returns (DeleteMediaResponse);
  // 获取媒体信息
  rpc GetMediaInfo(GetMediaInfoRequest) returns (GetMediaInfoResponse);
  // 批量获取媒体信息
  rpc BatchGetMediaInfo(BatchGetMediaInfoRequest) returns (BatchGetMediaInfoResponse);
}

// 上传信息
message UploadInfo {
  string upload_id = 1;
  string media_id = 2;
  string user_id = 3;
  string filename = 4;
  string mime_type = 5;
  int64 total_size = 6;
  int32 chunk_size = 7;
  int32 chunk_count = 8;
  repeated ChunkInfo uploaded_chunks = 9;
  UploadStatus status = 10;
  int64 created_at = 11;
  int64 updated_at = 12;
  map<string, string> metadata = 13;
}

// 分片信息
message ChunkInfo {
  int32 chunk_number = 1;
  int64 offset = 2;
  int32 size = 3;
  string checksum = 4;
}

enum UploadStatus {
  INIT = 0;
  UPLOADING = 1;
  PAUSED = 2;
  COMPLETED = 3;
  FAILED = 4;
  CANCELLED = 5;
}

message InitUploadRequest {
  string user_id = 1;
  string filename = 2;
  string mime_type = 3;
  int64 total_size = 4;
  int32 chunk_size = 5;
  map<string, string> metadata = 6;
}

message InitUploadResponse {
  string upload_id = 1;
  string media_id = 2;
  repeated ChunkInfo missing_chunks = 3;
  map<string, string> upload_headers = 4;
}

message UploadChunkRequest {
  string upload_id = 1;
  int32 chunk_number = 2;
  int64 offset = 3;
  bytes data = 4;
  string checksum = 5;
}

message UploadChunkResponse {
  bool success = 1;
  repeated ChunkInfo received_chunks = 2;
  repeated ChunkInfo missing_chunks = 3;
}

message CompleteUploadRequest {
  string upload_id = 1;
  repeated ChunkInfo chunks = 2;
}

message CompleteUploadResponse {
  bool success = 1;
  api.im.common.FileElem file = 2;
}

message GetUploadProgressRequest {
  string upload_id = 1;
}

message GetUploadProgressResponse {
  UploadInfo upload_info = 1;
  float progress = 2;
  UploadStatus status = 3;
}

message CancelUploadRequest {
  string upload_id = 1;
  string reason = 2;
}

message CancelUploadResponse {
  bool success = 1;
}

message GetDownloadUrlRequest {
  string media_id = 1;
  string user_id = 2;
  bool thumbnail = 3;
  map<string, string> download_options = 4;
}

message GetDownloadUrlResponse {
  string download_url = 1;
  map<string, string> headers = 2;
  int64 expires_in = 3;
  int64 content_length = 4;
}

message ProcessMediaRequest {
  string media_id = 1;
  repeated ProcessOperation operations = 2;
}

message ProcessOperation {
  string operation = 1;
  map<string, string> params = 2;
}

message ProcessMediaResponse {
  string process_id = 1;
  repeated ProcessResult results = 2;
}

message ProcessResult {
  string operation = 1;
  bool success = 2;
  string error = 3;
  map<string, string> result = 4;
}

message DeleteMediaRequest {
  string media_id = 1;
  string user_id = 2;
}

message DeleteMediaResponse {
  bool success = 1;
}

message GetMediaInfoRequest {
  string media_id = 1;
}

message GetMediaInfoResponse {
  api.im.common.FileElem file = 1;
  map<string, string> metadata = 2;
}

message BatchGetMediaInfoRequest {
  repeated string media_ids = 1;
}

message BatchGetMediaInfoResponse {
  map<string, api.im.common.FileElem> files = 1;
} 