syntax = "proto3";

package api.im.message;

option go_package = "github.com/flare/api/im/message;message";
option java_multiple_files = true;
option java_package = "api.im.message";

import "common/message.proto";
import "common/enums.proto";

// 消息路由服务
service MessageRouter {
  // 发送消息
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);
  // 消息投递
  rpc DeliverMessage(DeliverMessageRequest) returns (DeliverMessageResponse);
  // 消息确认
  rpc AckMessage(AckMessageRequest) returns (AckMessageResponse);
}

// 消息存储服务
service MessageStore {
  // 保存消息
  rpc StoreMessage(StoreMessageRequest) returns (StoreMessageResponse);
  // 获取消息历史
  rpc GetMessageHistory(GetMessageHistoryRequest) returns (GetMessageHistoryResponse);
  // 删除消息
  rpc DeleteMessage(DeleteMessageRequest) returns (DeleteMessageResponse);
}

// 消息同步服务
service MessageSync {
  // 同步消息
  rpc SyncMessage(SyncMessageRequest) returns (SyncMessageResponse);
  // 获取最新序号
  rpc GetLatestSequence(GetLatestSequenceRequest) returns (GetLatestSequenceResponse);
  // 消息状态同步
  rpc SyncMessageStatus(SyncMessageStatusRequest) returns (SyncMessageStatusResponse);
}

// 消息过滤服务
service MessageFilter {
  // 内容审核
  rpc FilterContent(FilterContentRequest) returns (FilterContentResponse);
  // 反垃圾检测
  rpc CheckSpam(CheckSpamRequest) returns (CheckSpamResponse);
  // 敏感词过滤
  rpc FilterSensitiveWords(FilterSensitiveWordsRequest) returns (FilterSensitiveWordsResponse);
}

// 请求响应定义
message SendMessageRequest {
  api.im.common.MessageData message = 1;
  string device_id = 2;
}

message SendMessageResponse {
  int64 server_msg_id = 1;
  int64 client_msg_id = 2;
  uint64 send_time = 3;
  api.im.common.MsgStatus status = 4;
}

message DeliverMessageRequest {
  api.im.common.MessageData message = 1;
  string target_device_id = 2;
}

message DeliverMessageResponse {
  bool success = 1;
  string error = 2;
}

message AckMessageRequest {
  int64 server_msg_id = 1;
  int64 client_msg_id = 2;
  string device_id = 3;
  api.im.common.MsgStatus status = 4;
}

message AckMessageResponse {
  bool success = 1;
}

message StoreMessageRequest {
  api.im.common.MessageData message = 1;
}

message StoreMessageResponse {
  bool success = 1;
  int64 server_msg_id = 2;
}

message GetMessageHistoryRequest {
  string conversation_id = 1;
  api.im.common.SessionType session_type = 2;
  uint64 start_time = 3;
  uint64 end_time = 4;
  int32 limit = 5;
  int64 seq = 6;
}

message GetMessageHistoryResponse {
  repeated api.im.common.MessageData messages = 1;
  int64 next_seq = 2;
  bool has_more = 3;
}

message DeleteMessageRequest {
  int64 server_msg_id = 1;
  string operator_id = 2;
}

message DeleteMessageResponse {
  bool success = 1;
}

message SyncMessageRequest {
  string user_id = 1;
  string device_id = 2;
  uint64 last_sync_time = 3;
  int64 last_seq = 4;
}

message SyncMessageResponse {
  repeated api.im.common.MessageData messages = 1;
  int64 latest_seq = 2;
  bool has_more = 3;
}

message GetLatestSequenceRequest {
  string user_id = 1;
  string conversation_id = 2;
  api.im.common.SessionType session_type = 3;
}

message GetLatestSequenceResponse {
  int64 sequence = 1;
}

message SyncMessageStatusRequest {
  int64 server_msg_id = 1;
  api.im.common.MsgStatus status = 2;
  repeated string device_ids = 3;
}

message SyncMessageStatusResponse {
  bool success = 1;
}

message FilterContentRequest {
  bytes content = 1;
  api.im.common.ContentType content_type = 2;
}

message FilterContentResponse {
  bool passed = 1;
  string reason = 2;
}

message CheckSpamRequest {
  string sender_id = 1;
  bytes content = 2;
  uint64 timestamp = 3;
}

message CheckSpamResponse {
  bool is_spam = 1;
  string reason = 2;
}

message FilterSensitiveWordsRequest {
  bytes content = 1;
}

message FilterSensitiveWordsResponse {
  bool contains_sensitive = 1;
  repeated string words = 2;
  bytes filtered_content = 3;
} 